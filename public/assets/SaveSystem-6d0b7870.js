class o{constructor(){this.storageKey="spaceSurvivorSave",this.defaultData={highScore:0,totalPlayTime:0,gamesPlayed:0,enemiesKilled:0,powerUpsCollected:0,settings:{soundVolume:.5,musicVolume:.3,masterVolume:1,muted:!1},achievements:[],statistics:{totalScore:0,longestSurvivalTime:0,highestWave:0,favoriteWeapon:"normal",weaponUsage:{normal:0,spread:0,power:0,rapid:0,laser:0}}},this.currentData=this.load()}save(e={}){try{const t={...this.currentData,...e,lastSaved:new Date().toISOString()};return localStorage.setItem(this.storageKey,JSON.stringify(t)),this.currentData=t,!0}catch(t){return console.error("Failed to save game data:",t),!1}}load(){try{const e=localStorage.getItem(this.storageKey);if(e){const t=JSON.parse(e);return this.mergeWithDefaults(t)}}catch(e){console.error("Failed to load game data:",e)}return{...this.defaultData}}mergeWithDefaults(e){const t={...this.defaultData},i=(s,r)=>{for(const a in r)r[a]&&typeof r[a]=="object"&&!Array.isArray(r[a])?(s[a]=s[a]||{},i(s[a],r[a])):s[a]=r[a]};return i(t,e),t}updateHighScore(e){return e>this.currentData.highScore?(this.currentData.highScore=e,this.save(),!0):!1}updateStatistics(e){const t=this.currentData.statistics;if(e.score&&(t.totalScore+=e.score),e.survivalTime&&e.survivalTime>t.longestSurvivalTime&&(t.longestSurvivalTime=e.survivalTime),e.wave&&e.wave>t.highestWave&&(t.highestWave=e.wave),e.weaponUsed){t.weaponUsage[e.weaponUsed]=(t.weaponUsage[e.weaponUsed]||0)+1;let i=0,s="normal";for(const[r,a]of Object.entries(t.weaponUsage))a>i&&(i=a,s=r);t.favoriteWeapon=s}this.save()}saveSettings(e){this.currentData.settings={...this.currentData.settings,...e},this.save()}getSettings(){return{...this.currentData.settings}}unlockAchievement(e){return this.currentData.achievements.includes(e)?!1:(this.currentData.achievements.push(e),this.save(),!0)}getAchievements(){return[...this.currentData.achievements]}reset(){this.currentData={...this.defaultData},this.save()}resetProgress(){const e={...this.currentData.settings};this.currentData={...this.defaultData,settings:e},this.save()}exportSave(){return btoa(JSON.stringify(this.currentData))}importSave(e){try{const t=JSON.parse(atob(e));return this.currentData=this.mergeWithDefaults(t),this.save(),!0}catch(t){return console.error("Failed to import save data:",t),!1}}getSaveData(){return{...this.currentData}}}export{o as SaveSystem};
