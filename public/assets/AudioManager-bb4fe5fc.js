class r{constructor(){this.sounds=new Map,this.music=new Map,this.currentMusic=null,this.soundVolume=.5,this.musicVolume=.3,this.muted=!1,this.audioContext=null,this.masterGain=null,this.soundGain=null,this.musicGain=null,this.initAudioContext(),this.soundPool=new Map}initAudioContext(){try{const t=window.AudioContext||window.webkitAudioContext;this.audioContext=new t,this.masterGain=this.audioContext.createGain(),this.masterGain.connect(this.audioContext.destination),this.soundGain=this.audioContext.createGain(),this.soundGain.connect(this.masterGain),this.soundGain.gain.value=this.soundVolume,this.musicGain=this.audioContext.createGain(),this.musicGain.connect(this.masterGain),this.musicGain.gain.value=this.musicVolume,document.addEventListener("click",()=>{this.audioContext.state==="suspended"&&this.audioContext.resume()},{once:!0})}catch(t){console.warn("Web Audio API not supported:",t)}}async loadAudio(){this.createSynthesizedSounds()}createSynthesizedSounds(){const t={shoot:{frequency:440,duration:.1,type:"square",volume:.3},explosion:{frequency:80,duration:.3,type:"noise",volume:.5},hit:{frequency:200,duration:.15,type:"sawtooth",volume:.4},powerup:{frequency:880,duration:.2,type:"sine",volume:.4},highscore:{frequency:660,duration:.5,type:"sine",volume:.5}};for(const[i,e]of Object.entries(t))this.sounds.set(i,e);this.music.set("bgm",{frequencies:[220,293.66,329.63,440],duration:4,type:"sine",volume:.2})}playSound(t,i=1){if(this.muted||!this.audioContext||!this.sounds.has(t))return;const e=this.sounds.get(t),s=e.volume*i;e.type==="noise"?this.playNoise(e.duration,s):this.playTone(e.frequency,e.duration,e.type,s)}playTone(t,i,e,s){const n=this.audioContext.createOscillator(),o=this.audioContext.createGain();n.connect(o),o.connect(this.soundGain),n.type=e,n.frequency.setValueAtTime(t,this.audioContext.currentTime),o.gain.setValueAtTime(s,this.audioContext.currentTime),o.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+i),n.start(this.audioContext.currentTime),n.stop(this.audioContext.currentTime+i)}playNoise(t,i){const e=this.audioContext.sampleRate*t,s=this.audioContext.createBuffer(1,e,this.audioContext.sampleRate),n=s.getChannelData(0);for(let a=0;a<e;a++)n[a]=Math.random()*2-1;const o=this.audioContext.createBufferSource(),u=this.audioContext.createGain();o.buffer=s,o.connect(u),u.connect(this.soundGain),u.gain.setValueAtTime(i,this.audioContext.currentTime),u.gain.exponentialRampToValueAtTime(.01,this.audioContext.currentTime+t),o.start(this.audioContext.currentTime)}playMusic(t){if(this.muted||!this.audioContext||!this.music.has(t))return;this.stopMusic();const i=this.music.get(t);this.currentMusic=[];const e=()=>{this.currentMusic&&(i.frequencies.forEach((s,n)=>{setTimeout(()=>{this.currentMusic&&this.playTone(s,.2,i.type,i.volume)},n*250)}),this.currentMusic&&setTimeout(e,i.duration*1e3))};e()}stopMusic(){this.currentMusic=null}setSoundVolume(t){this.soundVolume=Math.max(0,Math.min(1,t)),this.soundGain&&(this.soundGain.gain.value=this.soundVolume)}setMusicVolume(t){this.musicVolume=Math.max(0,Math.min(1,t)),this.musicGain&&(this.musicGain.gain.value=this.musicVolume)}setMasterVolume(t){const i=Math.max(0,Math.min(1,t));this.masterGain&&(this.masterGain.gain.value=i)}toggleMute(){this.muted=!this.muted,this.masterGain&&(this.masterGain.gain.value=this.muted?0:1)}getMuted(){return this.muted}}export{r as AudioManager};
