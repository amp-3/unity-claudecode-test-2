import{_ as h}from"./main-c3aa80d2.js";import{E as l}from"./Entity-ae023216.js";import{AssetLoader as r}from"./AssetLoader-1c516a76.js";class d extends l{constructor(e,t){super(e,t),this.type="player",this.speed=200,this.health=3,this.maxHealth=3,this.fireRate=8,this.lastShotTime=0,this.weapon="normal",this.boundaryRadius=150,this.invulnerableTime=0,this.invulnerableDuration=1.5,this.width=32,this.height=32,this.collisionRadius=16,this.speedMultiplier=1,this.fireRateMultiplier=1,this.baseDamage=1,this.damageMultiplier=1,this.baseSpeed=200,this.baseFireRate=8,this.multiShotCount=1,this.hasPiercing=!1,this.hasExplosive=!1,this.hasLifesteal=!1,this.assetLoader=r.getInstance()}update(e,t){super.update(e),this.invulnerableTime>0&&(this.invulnerableTime-=e),this.handleMovement(e,t),this.handleShooting(e,t)}handleMovement(e,t){const i=t.getMovementInput(),s=Math.sqrt(i.x*i.x+i.y*i.y);s>0&&(i.x/=s,i.y/=s),this.vx=i.x*this.speed*this.speedMultiplier,this.vy=i.y*this.speed*this.speedMultiplier,(i.x!==0||i.y!==0)&&(this.rotation=Math.atan2(i.y,i.x))}handleShooting(e,t){this.lastShotTime+=e;const i=this.lastShotTime>=1/(this.fireRate*this.fireRateMultiplier);if(t.mouse.pressed&&i){const s=this.getShootDirection(t);this.shoot(s),this.lastShotTime=0}}getShootDirection(e){const t=e.mouse.x-this.x,i=e.mouse.y-this.y;return Math.abs(t)<.001&&Math.abs(i)<.001?0:Math.atan2(i,t)}async shoot(e){const{Game:t}=await h(()=>import("./main-c3aa80d2.js").then(a=>a.G),[]),i=t.getInstance();i.weaponSystem.fire(this.x,this.y,e,i.permanentUpgrades).forEach(a=>{i.addEntity(a)}),i.audioManager.playSound("shoot",.3)}takeDamage(e){return this.invulnerableTime>0?!1:(this.health-=e,this.invulnerableTime=this.invulnerableDuration,this.health<=0?(this.destroy(),h(()=>import("./main-c3aa80d2.js").then(t=>t.G),[]).then(t=>{t.Game.getInstance().setState("GAME_OVER")}),!0):!1)}heal(e){this.health=Math.min(this.health+e,this.maxHealth)}applySpeedBoost(e,t){this.speedMultiplier=e,setTimeout(()=>{this.speedMultiplier=1},t*1e3)}applyFireRateBoost(e,t){this.fireRateMultiplier=e,setTimeout(()=>{this.fireRateMultiplier=1},t*1e3)}render(e){e.save(),e.translate(this.x,this.y),this.invulnerableTime>0&&Math.floor(this.invulnerableTime*10)%2===0&&(e.globalAlpha=.5);const t=this.assetLoader.getImage("player");if(t&&this.assetLoader.isLoaded("player")){e.rotate(this.rotation+Math.PI/2);const i=this.width,s=this.height;e.drawImage(t,-i/2,-s/2,i,s)}else e.rotate(this.rotation),e.fillStyle="#00ff00",e.beginPath(),e.moveTo(this.width/2,0),e.lineTo(-this.width/2,-this.height/2),e.lineTo(-this.width/4,0),e.lineTo(-this.width/2,this.height/2),e.closePath(),e.fill(),e.strokeStyle="#00dd00",e.lineWidth=2,e.stroke();e.restore()}applyPermanentUpgrades(e){const t=e.getPlayerStats({damage:this.baseDamage,fireRate:this.baseFireRate,speed:this.baseSpeed,maxHealth:this.maxHealth});this.damageMultiplier=t.damage/this.baseDamage,this.fireRate=t.fireRate,this.speed=t.speed;const i=t.maxHealth-this.maxHealth;i>0&&(this.maxHealth=t.maxHealth,this.heal(i)),this.multiShotCount=t.multiShot,this.hasPiercing=t.piercing,this.hasExplosive=t.explosive,this.hasLifesteal=t.lifesteal}getCurrentDamage(){return this.baseDamage*this.damageMultiplier}}export{d as Player};
