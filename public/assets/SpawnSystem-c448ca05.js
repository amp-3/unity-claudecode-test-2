import{_ as n}from"./main-c3aa80d2.js";import{E as l}from"./Entity-ae023216.js";class r extends l{constructor(e,t){super(e,t),this.type="enemy",this.health=1,this.maxHealth=1,this.speed=100,this.damage=1,this.scoreValue=10,this.expValue=10,this.behaviorType="chase",this.shootCooldown=0,this.shootInterval=2,this.aggroRange=200,this.wanderAngle=Math.random()*Math.PI*2,this.dropChance=.1,this.width=20,this.height=20,this.collisionRadius=10}update(e,t){switch(super.update(e),(!t||!t.alive)&&(this.behaviorType="wander"),this.behaviorType){case"chase":this.chasePlayer(e,t);break;case"orbit":this.orbitPlayer(e,t);break;case"sniper":this.sniperBehavior(e,t);break;case"wander":this.wander(e);break}this.constrainToArea(400,300,290)}chasePlayer(e,t){if(!t)return;const s=this.angleTo(t);this.vx=Math.cos(s)*this.speed,this.vy=Math.sin(s)*this.speed,this.rotation=s}orbitPlayer(e,t){if(!t)return;const s=this.distanceTo(t),i=this.angleTo(t);if(s>150)this.vx=Math.cos(i)*this.speed,this.vy=Math.sin(i)*this.speed;else if(s<100)this.vx=-Math.cos(i)*this.speed,this.vy=-Math.sin(i)*this.speed;else{const h=i+Math.PI/2;this.vx=Math.cos(h)*this.speed,this.vy=Math.sin(h)*this.speed}this.rotation=Math.atan2(this.vy,this.vx)}sniperBehavior(e,t){if(!t)return;const s=this.distanceTo(t),i=this.angleTo(t);s>200?(this.vx=Math.cos(i)*this.speed*.5,this.vy=Math.sin(i)*this.speed*.5):(this.vx*=.95,this.vy*=.95,this.shootCooldown-=e,this.shootCooldown<=0&&(this.shoot(i),this.shootCooldown=this.shootInterval)),this.rotation=i}wander(e){this.wanderAngle+=(Math.random()-.5)*2*e,this.vx=Math.cos(this.wanderAngle)*this.speed*.5,this.vy=Math.sin(this.wanderAngle)*this.speed*.5,this.rotation=this.wanderAngle}async shoot(e){const t=(await n(()=>import("./main-c3aa80d2.js").then(h=>h.G),[])).Game.getInstance(),{Bullet:s}=await n(()=>import("./Bullet-7b575848.js"),["assets/Bullet-7b575848.js","assets/Entity-ae023216.js"]),i=new s(this.x,this.y,e,300,1);i.type="enemyBullet",t.addEntity(i)}takeDamage(e){return this.health-=e,this.health<=0?(this.destroy(),!0):!1}render(e){e.save(),e.translate(this.x,this.y),e.rotate(this.rotation);const t=this.health/this.maxHealth;e.fillStyle=`rgb(${255*(1-t)}, ${255*t}, 0)`,e.fillRect(-this.width/2,-this.height/2,this.width,this.height),e.strokeStyle="#ff0000",e.lineWidth=2,e.strokeRect(-this.width/2,-this.height/2,this.width,this.height),e.restore()}}class p extends r{constructor(e,t){super(e,t),this.speed=180,this.health=1,this.scoreValue=15,this.expValue=12,this.width=16,this.height=16,this.collisionRadius=8,this.dropChance=.15}render(e){e.save(),e.translate(this.x,this.y),e.rotate(this.rotation),e.fillStyle="#ff00ff",e.beginPath(),e.moveTo(this.width/2,0),e.lineTo(-this.width/2,-this.height/2),e.lineTo(-this.width/2,this.height/2),e.closePath(),e.fill(),e.strokeStyle="#dd00dd",e.lineWidth=2,e.stroke(),e.restore()}}class w extends r{constructor(e,t){super(e,t),this.speed=50,this.health=5,this.maxHealth=5,this.damage=2,this.scoreValue=30,this.expValue=25,this.width=30,this.height=30,this.collisionRadius=15,this.dropChance=.25}render(e){e.save(),e.translate(this.x,this.y),e.rotate(this.rotation);const t=this.health/this.maxHealth;e.fillStyle=`rgb(100, ${100*t}, ${100*t})`,e.fillRect(-this.width/2,-this.height/2,this.width,this.height),e.fillStyle="#444",e.fillRect(-this.width/3,-this.height/3,this.width*2/3,this.height*2/3),e.strokeStyle="#666",e.lineWidth=3,e.strokeRect(-this.width/2,-this.height/2,this.width,this.height),e.restore()}}class f extends r{constructor(e,t){super(e,t),this.behaviorType="sniper",this.speed=70,this.health=2,this.maxHealth=2,this.scoreValue=25,this.expValue=20,this.shootInterval=1.5,this.width=24,this.height=18,this.collisionRadius=12,this.dropChance=.2}render(e){e.save(),e.translate(this.x,this.y),e.rotate(this.rotation),e.fillStyle="#0088ff",e.fillRect(-this.width/2,-this.height/2,this.width,this.height),e.fillStyle="#0066cc",e.fillRect(this.width/2,-2,10,4),e.strokeStyle="#0066cc",e.lineWidth=2,e.strokeRect(-this.width/2,-this.height/2,this.width,this.height),e.restore()}}class c extends r{constructor(e,t){super(e,t),this.behaviorType="orbit",this.speed=120,this.health=2,this.maxHealth=2,this.scoreValue=20,this.expValue=18,this.width=20,this.height=20,this.collisionRadius=10,this.dropChance=.15}render(e){e.save(),e.translate(this.x,this.y),e.rotate(this.rotation+Date.now()*.005),e.fillStyle="#ff8800",e.beginPath();for(let t=0;t<6;t++){const s=t/6*Math.PI*2,i=t%2===0?this.width/2:this.width/3,h=Math.cos(s)*i,a=Math.sin(s)*i;t===0?e.moveTo(h,a):e.lineTo(h,a)}e.closePath(),e.fill(),e.strokeStyle="#cc6600",e.lineWidth=2,e.stroke(),e.restore()}}class m extends l{constructor(e,t,s="health"){super(e,t),this.type="powerup",this.powerUpType=s,this.lifetime=10,this.bobAmount=10,this.bobSpeed=2,this.baseY=t,this.rotationSpeed=2,this.collected=!1,this.magnetRange=100,this.magnetSpeed=300,this.width=24,this.height=24,this.collisionRadius=12,this.setupPowerUpProperties()}setupPowerUpProperties(){const e={health:{color:"#00ff00",icon:"cross",effect:s=>{s.heal(1)},description:"Restore 1 health"},speed:{color:"#00ffff",icon:"arrow",effect:s=>{s.applySpeedBoost(1.5,5)},description:"Speed boost for 5 seconds"},fireRate:{color:"#ff00ff",icon:"bullets",effect:s=>{s.applyFireRateBoost(2,5)},description:"Fire rate boost for 5 seconds"},weaponSpread:{color:"#ffff00",icon:"spread",effect:async s=>{(await n(()=>import("./main-c3aa80d2.js").then(h=>h.G),[])).Game.getInstance().weaponSystem.setWeapon("spread",10)},description:"Spread weapon for 10 seconds"},weaponPower:{color:"#ff8800",icon:"power",effect:async s=>{(await n(()=>import("./main-c3aa80d2.js").then(h=>h.G),[])).Game.getInstance().weaponSystem.setWeapon("power",10)},description:"Power weapon for 10 seconds"},weaponRapid:{color:"#ff0088",icon:"rapid",effect:async s=>{(await n(()=>import("./main-c3aa80d2.js").then(h=>h.G),[])).Game.getInstance().weaponSystem.setWeapon("rapid",10)},description:"Rapid weapon for 10 seconds"},weaponLaser:{color:"#00ffff",icon:"laser",effect:async s=>{(await n(()=>import("./main-c3aa80d2.js").then(h=>h.G),[])).Game.getInstance().weaponSystem.setWeapon("laser",10)},description:"Laser weapon for 10 seconds"},shield:{color:"#8888ff",icon:"shield",effect:s=>{s.invulnerableTime=3},description:"Shield for 3 seconds"}},t=e[this.powerUpType]||e.health;this.color=t.color,this.icon=t.icon,this.effect=t.effect,this.description=t.description}update(e,t){if(super.update(e),this.lifetime-=e,this.lifetime<=0){this.destroy();return}if(this.y=this.baseY+Math.sin(Date.now()*.001*this.bobSpeed)*this.bobAmount,this.rotation+=this.rotationSpeed*e,t&&t.alive){const s=this.distanceTo(t);if(s<this.magnetRange){const i=this.angleTo(t),h=(1-s/this.magnetRange)*this.magnetSpeed;this.vx=Math.cos(i)*h,this.vy=Math.sin(i)*h}else this.vx*=.9,this.vy*=.9}this.lifetime<2&&(this.opacity=this.lifetime/2)}applyTo(e){this.collected||(this.collected=!0,this.effect(e),n(()=>import("./main-c3aa80d2.js").then(t=>t.G),[]).then(t=>{const s=t.Game.getInstance();if(s.uiManager&&s.uiManager.addNotification(this.description),s.saveSystem){const i=s.saveSystem.getSaveData();i.powerUpsCollected=(i.powerUpsCollected||0)+1,s.saveSystem.save(i)}}))}render(e){switch(e.save(),e.translate(this.x,this.y),e.rotate(this.rotation),this.opacity!==void 0&&(e.globalAlpha=this.opacity),e.shadowBlur=20,e.shadowColor=this.color,e.fillStyle="rgba(0, 0, 0, 0.5)",e.beginPath(),e.arc(0,0,this.width/2,0,Math.PI*2),e.fill(),e.strokeStyle=this.color,e.lineWidth=2,e.stroke(),e.fillStyle=this.color,e.strokeStyle=this.color,e.lineWidth=2,this.icon){case"cross":this.drawCross(e);break;case"arrow":this.drawArrow(e);break;case"bullets":this.drawBullets(e);break;case"spread":this.drawSpread(e);break;case"power":this.drawPower(e);break;case"rapid":this.drawRapid(e);break;case"laser":this.drawLaser(e);break;case"shield":this.drawShield(e);break}e.restore()}drawCross(e){e.fillRect(-2,-8,4,8*2),e.fillRect(-8,-2,8*2,4)}drawArrow(e){e.beginPath(),e.moveTo(8,0),e.lineTo(-4,-6),e.lineTo(-4,-2),e.lineTo(-8,-2),e.lineTo(-8,2),e.lineTo(-4,2),e.lineTo(-4,6),e.closePath(),e.fill()}drawBullets(e){for(let t=0;t<3;t++){const s=(t-1)*6;e.fillRect(-6,s-1,12,2)}}drawSpread(e){e.save();for(let t=-1;t<=1;t++)e.save(),e.rotate(t*.3),e.fillRect(0,-1,10,2),e.restore();e.restore()}drawPower(e){e.beginPath(),e.arc(0,0,6,0,Math.PI*2),e.fill(),e.beginPath(),e.arc(0,0,3,0,Math.PI*2),e.fillStyle="rgba(0, 0, 0, 0.5)",e.fill()}drawRapid(e){for(let t=0;t<4;t++){const s=t*4-6;e.fillRect(s,-1,2,2)}}drawLaser(e){e.fillRect(-10,-1,20,2),e.fillRect(-12,-2,24,1),e.fillRect(-12,1,24,1)}drawShield(e){e.beginPath(),e.moveTo(0,-8),e.lineTo(-6,-4),e.lineTo(-6,2),e.lineTo(0,8),e.lineTo(6,2),e.lineTo(6,-4),e.closePath(),e.stroke()}}class v{constructor(e,t){this.gameWidth=e,this.gameHeight=t,this.centerX=e/2,this.centerY=t/2,this.spawnRadius=280,this.wave=0,this.enemiesSpawned=0,this.enemiesInWave=0,this.timeSinceLastSpawn=0,this.waveDelay=3,this.betweenWaveDelay=5,this.inBetweenWaves=!1,this.spawnQueue=[],this.newEnemies=[],this.enemyTypes=[{class:r,weight:5,minWave:0},{class:p,weight:3,minWave:2},{class:w,weight:2,minWave:4},{class:f,weight:2,minWave:3},{class:c,weight:2,minWave:5}],this.powerUpTypes=["health","speed","fireRate","weaponSpread","weaponPower","weaponRapid","weaponLaser","shield"]}reset(){this.wave=0,this.enemiesSpawned=0,this.enemiesInWave=0,this.timeSinceLastSpawn=0,this.inBetweenWaves=!1,this.spawnQueue=[],this.newEnemies=[]}update(e,t){if(this.newEnemies=[],this.timeSinceLastSpawn+=e,this.inBetweenWaves){this.timeSinceLastSpawn>=this.betweenWaveDelay&&(this.startNewWave(),this.inBetweenWaves=!1);return}if(this.enemiesSpawned>=this.enemiesInWave&&this.spawnQueue.length===0){this.inBetweenWaves=!0,this.timeSinceLastSpawn=0;return}const s=Math.max(.15,1-this.wave*.05);this.timeSinceLastSpawn>=s&&this.enemiesSpawned<this.enemiesInWave&&(this.spawnEnemy(),this.timeSinceLastSpawn=0)}startNewWave(){this.wave++,this.enemiesSpawned=0,this.enemiesInWave=Math.floor(5+this.wave*2+Math.pow(this.wave,1.5));const e=this.enemyTypes.filter(s=>s.minWave<=this.wave),t=e.reduce((s,i)=>s+i.weight,0);for(let s=0;s<this.enemiesInWave;s++){let i=Math.random()*t,h=null;for(const a of e)if(i-=a.weight,i<=0){h=a.class;break}h||(h=r),this.spawnQueue.push(h)}for(let s=this.spawnQueue.length-1;s>0;s--){const i=Math.floor(Math.random()*(s+1));[this.spawnQueue[s],this.spawnQueue[i]]=[this.spawnQueue[i],this.spawnQueue[s]]}}spawnEnemy(){if(this.spawnQueue.length===0)return;const e=this.spawnQueue.shift(),t=Math.random()*Math.PI*2,s=this.centerX+Math.cos(t)*this.spawnRadius,i=this.centerY+Math.sin(t)*this.spawnRadius,h=new e(s,i),a=1+(this.wave-1)*.1;h.health*=a,h.maxHealth*=a,h.scoreValue=Math.floor(h.scoreValue*(1+this.wave*.2)),this.newEnemies.push(h),this.enemiesSpawned++}getNewEnemies(){return this.newEnemies}trySpawnPowerUp(e,t){const s=Math.random(),i=.1,h=this.wave*.02,a=Math.min(.5,i+h);if(s<a){const d=this.powerUpTypes[Math.floor(Math.random()*this.powerUpTypes.length)];return new m(e,t,d)}return null}getCurrentWave(){return this.wave}getEnemiesRemaining(){return this.enemiesInWave-this.enemiesSpawned}isInBetweenWaves(){return this.inBetweenWaves}}export{v as SpawnSystem};
