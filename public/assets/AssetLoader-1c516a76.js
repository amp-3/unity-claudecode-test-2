var g=Object.defineProperty;var c=(o,t,s)=>t in o?g(o,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[t]=s;var l=(o,t,s)=>(c(o,typeof t!="symbol"?t+"":t,s),s);const e=class e{constructor(){this.images=new Map,this.loadingPromises=new Map,this.loadedCount=0,this.totalCount=0}async loadImage(t,s){if(this.images.has(t))return this.images.get(t);if(this.loadingPromises.has(t))return this.loadingPromises.get(t);const a=new Promise((n,r)=>{const i=new Image;i.onload=()=>{this.images.set(t,i),this.loadedCount++,console.log(`✅ Loaded sprite: ${t}`),n(i)},i.onerror=()=>{console.error(`❌ Failed to load sprite: ${t} from ${s}`),r(new Error(`Failed to load image: ${s}`))},i.src=s});return this.loadingPromises.set(t,a),this.totalCount++,a}getImage(t){return this.images.get(t)}isLoaded(t){return this.images.has(t)}getLoadingProgress(){return this.totalCount>0?this.loadedCount/this.totalCount:1}async loadAllSprites(){const s=Object.entries({player:"assets/sprites/player.png"}).map(([a,n])=>this.loadImage(a,n).catch(r=>(console.warn(`Non-critical asset load failure: ${r.message}`),null)));await Promise.allSettled(s),console.log(`🎨 Asset loading complete: ${this.loadedCount}/${this.totalCount} sprites loaded`)}static getInstance(){return e.instance||(e.instance=new e),e.instance}};l(e,"instance",null);let d=e;export{d as AssetLoader};
